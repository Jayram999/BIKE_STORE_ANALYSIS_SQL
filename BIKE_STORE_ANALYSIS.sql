CREATE TABLE Brands (brand_id INT, brand_name VARCHAR(20));

INSERT INTO Brands (brand_id, brand_name) VALUES 
(1, 'Electra'),
(2, 'Haro'),
(3, 'Heller'),
(4, 'Pure Cycles'),
(5, 'Ritchey'),
(6, 'Strider'),
(7, 'Sun Bicycles'),
(8, 'Surly'),
(9, 'Trek');

SELECT * FROM dbo.Brands;

SELECT * FROM [dbo].[Brands];
SELECT * FROM [dbo].[Categories];
SELECT * FROM [dbo].[Customers];
SELECT * FROM [dbo].[Order_Items];
SELECT * FROM [dbo].[Orders];
SELECT * FROM [dbo].[Products];
SELECT * FROM [dbo].[Staffs];
SELECT * FROM [dbo].[Stocks];
SELECT * FROM [dbo].[Stores];

-- Calculate total sales Revenue
SELECT SUM((QUANTITY * LIST_PRICE) * (1 - DISCOUNT)) AS TOTAL_REVENUE FROM [DBO].[ORDER_ITEMS];

-- Count the number of orders placed
SELECT COUNT(*) FROM [DBO].[ORDER_ITEMS];

-- Determine the total number of products sold
SELECT SUM(QUANTITY) FROM [DBO].[ORDER_ITEMS];

-- Calculate the average order value
SELECT AVG(QUANTITY * LIST_PRICE) FROM [DBO].[ORDER_ITEMS];

-- Calculate the revenue generated by each product category
SELECT P.PRODUCT_NAME, SUM((O.QUANTITY * O.LIST_PRICE) * (1 - O.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] O 
INNER JOIN [DBO].[PRODUCTS] P ON O.PRODUCT_ID = P.PRODUCT_ID 
GROUP BY P.PRODUCT_NAME;

-- Calculate the revenue generated by each STATE
SELECT C.STATE, SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] OI 
LEFT JOIN [DBO].[ORDERS] O ON OI.ORDER_ID = O.order_id 
LEFT JOIN [DBO].[CUSTOMERS] C ON O.CUSTOMER_ID = C.CUSTOMER_ID 
GROUP BY C.STATE;

-- Calculate the revenue generated by each STORE
SELECT S.STORE_NAME, SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] OI 
LEFT JOIN [DBO].[ORDERS] O ON OI.ORDER_ID = O.order_id 
LEFT JOIN STORES S ON O.STORE_ID = S.STORE_ID 
GROUP BY S.STORE_NAME 
ORDER BY 2 DESC;

-- Calculate the revenue generated by each STAFF
SELECT CONCAT(S.FIRST_NAME, ' ', S.LAST_NAME) AS FULL_NAME, SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] OI 
LEFT JOIN [DBO].[ORDERS] O ON OI.ORDER_ID = O.order_id 
LEFT JOIN STAFFS S ON O.STAFF_ID = S.STAFF_ID 
GROUP BY S.FIRST_NAME, S.LAST_NAME 
ORDER BY 2 DESC;

-- Calculate the revenue generated by each Category
SELECT C.CATEGORY_NAME, SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] OI 
LEFT JOIN [DBO].[PRODUCTS] P ON OI.PRODUCT_ID = P.PRODUCT_ID 
LEFT JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID 
GROUP BY C.CATEGORY_NAME 
ORDER BY 2 DESC;

-- Calculate the revenue generated by each Brand
SELECT B.BRAND_NAME, SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE 
FROM [DBO].[ORDER_ITEMS] OI 
LEFT JOIN [DBO].[PRODUCTS] P ON OI.PRODUCT_ID = P.PRODUCT_ID 
LEFT JOIN BRANDS B ON P.BRAND_ID = B.BRAND_ID 
GROUP BY B.BRAND_NAME 
ORDER BY 2 DESC;

-- Most valuable Customer
WITH CTE AS (
    SELECT 
        CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS FULL_NAME,
        SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE,
        ROW_NUMBER() OVER (ORDER BY SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) DESC) AS RANK
    FROM 
        [DBO].[ORDER_ITEMS] OI 
    LEFT JOIN 
        [DBO].[ORDERS] O ON OI.ORDER_ID = O.order_id
    LEFT JOIN 
        [DBO].[CUSTOMERS] C ON O.CUSTOMER_ID = C.CUSTOMER_ID
    GROUP BY 
        C.FIRST_NAME, C.LAST_NAME
)
SELECT 
    FULL_NAME,
    TOTAL_REVENUE
FROM 
    CTE
WHERE 
    RANK <= 1;

-- Analyze sales trends over time (e.g., monthly or quarterly)
WITH CTE AS (
    SELECT 
        YEAR(O.ORDER_DATE) AS YEAR_NO,
        MONTH(O.ORDER_DATE) AS MONTH_NO,
        SUM((OI.QUANTITY * OI.LIST_PRICE) * (1 - OI.DISCOUNT)) AS TOTAL_REVENUE
    FROM 
        [DBO].[ORDER_ITEMS] OI 
    LEFT JOIN 
        [DBO].[ORDERS] O ON OI.ORDER_ID = O.order_id
    GROUP BY 
        YEAR(O.ORDER_DATE), MONTH(O.ORDER_DATE)
)
SELECT 
    *,
    LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR_NO ASC, MONTH_NO ASC) AS PREV_MONTH,
    ROUND((TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR_NO ASC, MONTH_NO ASC)) / LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR_NO ASC, MONTH_NO ASC), 2) AS GROWTH_RATE
FROM 
    CTE;

-- Customer Segmentation
WITH customer_stats AS (
    SELECT
        customer_id,
        SUM(quantity * list_price * (1 - discount)) AS total_spent,
        COUNT(DISTINCT orders.order_id) AS total_orders,
        DATEDIFF(DAY, '2018-12-29', MAX(ORDER_DATE)) AS days_since_last_purchase
    FROM 
        [DBO].[orders]
    INNER JOIN 
        [DBO].[order_items] ON orders.order_id = order_items.order_id
    GROUP BY 
        customer_id
)
SELECT  
    customer_id,
    CASE WHEN total_orders > 1 THEN 'repeat buyer' ELSE 'one-time buyer' END AS purchase_frequency,
    CASE WHEN days_since_last_purchase < 90 THEN 'recent buyer' ELSE 'not recent buyer' END AS purchase_recency
FROM   
    customer_stats;
